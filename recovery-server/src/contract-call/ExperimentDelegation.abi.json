{
  "abi": [
    { "type": "fallback", "stateMutability": "payable" },
    { "type": "receive", "stateMutability": "payable" },
    {
      "type": "function",
      "name": "authorize",
      "inputs": [
        {
          "name": "publicKey",
          "type": "tuple",
          "internalType": "struct ECDSA.PublicKey",
          "components": [
            { "name": "x", "type": "uint256", "internalType": "uint256" },
            { "name": "y", "type": "uint256", "internalType": "uint256" }
          ]
        },
        {
          "name": "keyType",
          "type": "uint8",
          "internalType": "enum ExperimentDelegation.KeyType"
        },
        { "name": "expiry", "type": "uint256", "internalType": "uint256" },
        {
          "name": "signature",
          "type": "tuple",
          "internalType": "struct ECDSA.RecoveredSignature",
          "components": [
            { "name": "r", "type": "uint256", "internalType": "uint256" },
            { "name": "s", "type": "uint256", "internalType": "uint256" },
            { "name": "yParity", "type": "uint8", "internalType": "uint8" }
          ]
        }
      ],
      "outputs": [
        { "name": "publicKeyIndex", "type": "uint32", "internalType": "uint32" }
      ],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "execute",
      "inputs": [
        { "name": "calls", "type": "bytes", "internalType": "bytes" },
        {
          "name": "signature",
          "type": "tuple",
          "internalType": "struct ECDSA.Signature",
          "components": [
            { "name": "r", "type": "uint256", "internalType": "uint256" },
            { "name": "s", "type": "uint256", "internalType": "uint256" }
          ]
        },
        {
          "name": "metadata",
          "type": "tuple",
          "internalType": "struct WebAuthnP256.Metadata",
          "components": [
            {
              "name": "authenticatorData",
              "type": "bytes",
              "internalType": "bytes"
            },
            {
              "name": "clientDataJSON",
              "type": "string",
              "internalType": "string"
            },
            {
              "name": "challengeIndex",
              "type": "uint16",
              "internalType": "uint16"
            },
            { "name": "typeIndex", "type": "uint16", "internalType": "uint16" },
            {
              "name": "userVerificationRequired",
              "type": "bool",
              "internalType": "bool"
            }
          ]
        },
        {
          "name": "publicKeyIndex",
          "type": "uint32",
          "internalType": "uint32"
        },
        { "name": "prehash", "type": "bool", "internalType": "bool" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "keys",
      "inputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "outputs": [
        { "name": "authorized", "type": "bool", "internalType": "bool" },
        { "name": "expiry", "type": "uint256", "internalType": "uint256" },
        {
          "name": "keyType",
          "type": "uint8",
          "internalType": "enum ExperimentDelegation.KeyType"
        },
        {
          "name": "publicKey",
          "type": "tuple",
          "internalType": "struct ECDSA.PublicKey",
          "components": [
            { "name": "x", "type": "uint256", "internalType": "uint256" },
            { "name": "y", "type": "uint256", "internalType": "uint256" }
          ]
        }
      ],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "multiSend",
      "inputs": [
        { "name": "transactions", "type": "bytes", "internalType": "bytes" }
      ],
      "outputs": [],
      "stateMutability": "payable"
    },
    {
      "type": "function",
      "name": "nonce",
      "inputs": [],
      "outputs": [{ "name": "", "type": "uint256", "internalType": "uint256" }],
      "stateMutability": "view"
    },
    {
      "type": "function",
      "name": "recoverAccount",
      "inputs": [
        {
          "name": "publicKey",
          "type": "tuple",
          "internalType": "struct ECDSA.PublicKey",
          "components": [
            { "name": "x", "type": "uint256", "internalType": "uint256" },
            { "name": "y", "type": "uint256", "internalType": "uint256" }
          ]
        },
        {
          "name": "keyType",
          "type": "uint8",
          "internalType": "enum ExperimentDelegation.KeyType"
        },
        { "name": "expiry", "type": "uint256", "internalType": "uint256" },
        { "name": "keyIndex", "type": "uint256", "internalType": "uint256" }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    {
      "type": "function",
      "name": "revoke",
      "inputs": [
        {
          "name": "publicKeyIndex",
          "type": "uint32",
          "internalType": "uint32"
        },
        {
          "name": "signature",
          "type": "tuple",
          "internalType": "struct ECDSA.RecoveredSignature",
          "components": [
            { "name": "r", "type": "uint256", "internalType": "uint256" },
            { "name": "s", "type": "uint256", "internalType": "uint256" },
            { "name": "yParity", "type": "uint8", "internalType": "uint8" }
          ]
        }
      ],
      "outputs": [],
      "stateMutability": "nonpayable"
    },
    { "type": "error", "name": "AccountNotFound", "inputs": [] },
    { "type": "error", "name": "InvalidAuthority", "inputs": [] },
    { "type": "error", "name": "InvalidSignature", "inputs": [] },
    { "type": "error", "name": "KeyExpired", "inputs": [] },
    { "type": "error", "name": "KeyNotAuthorized", "inputs": [] }
  ],
  "bytecode": {
    "object": "0x608060405234601c57600e6020565b611f3d61002b8239611f3d90f35b6026565b60405190565b5f80fdfe60806040526004361015610010575b005b61001a5f35610089565b80630cb6aaf11461008457806361040b831461007f578063641cdfe21461007a5780638d80ff0a14610075578063a78fc24414610070578063affed0e01461006b5763b34893910361000e5761096b565b6106fa565b610664565b6105d3565b6104db565b610438565b610380565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b90565b6100ad816100a1565b036100b457565b5f80fd5b905035906100c5826100a4565b565b906020828203126100e0576100dd915f016100b8565b90565b610099565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61010f816100f9565b821015610129576101216005916100fd565b910201905f90565b6100e5565b5f1c90565b60ff1690565b61014561014a9161012e565b610133565b90565b6101579054610139565b90565b90565b61016961016e9161012e565b61015a565b90565b61017b905461015d565b90565b60ff1690565b6101906101959161012e565b61017e565b90565b6101a29054610184565b90565b906101af906100a1565b9052565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906101db906101b3565b810190811067ffffffffffffffff8211176101f557604052565b6101bd565b9061020d61020661008f565b92836101d1565b565b61021960406101fa565b90565b9061025361024a600161022d61020f565b9461024461023c5f8301610171565b5f88016101a5565b01610171565b602084016101a5565b565b5f90610260826100f9565b8110156102a65761027091610106565b509061027d5f830161014d565b9161028a60018201610171565b916102a3600361029c60028501610198565b930161021c565b90565b5f80fd5b151590565b6102b8906102aa565b9052565b6102c5906100a1565b9052565b634e487b7160e01b5f52602160045260245ffd5b600211156102e757565b6102c9565b906102f6826102dd565b565b610301906102ec565b90565b61030d906102f8565b9052565b61031a906100a1565b9052565b90602080610340936103365f8201515f860190610311565b0151910190610311565b565b61037761037e9461036d60609498979561036360a086019a5f8701906102af565b60208501906102bc565b6040830190610304565b019061031e565b565b346103b4576103b061039b6103963660046100c7565b610255565b906103a794929461008f565b94859485610342565b0390f35b610095565b5f80fd5b908160409103126103cb5790565b6103b9565b600211156103da57565b5f80fd5b905035906103eb826103d0565b565b60a08183031261042e57610403825f83016103bd565b9261042b61041484604085016103de565b9361042281606086016100b8565b936080016100b8565b90565b610099565b5f0190565b3461046a5761045461044b3660046103ed565b92919091610c51565b61045c61008f565b8061046681610433565b0390f35b610095565b63ffffffff1690565b6104818161046f565b0361048857565b5f80fd5b9050359061049982610478565b565b908160609103126104a95790565b6103b9565b91906080838203126104d657806104ca6104d3925f860161048c565b9360200161049b565b90565b610099565b3461050a576104f46104ee3660046104ae565b90610ebe565b6104fc61008f565b8061050681610433565b0390f35b610095565b5f80fd5b5f80fd5b67ffffffffffffffff8111610535576105316020916101b3565b0190565b6101bd565b90825f939282370152565b9092919261055a61055582610517565b6101fa565b93818552602085019082840111610576576105749261053a565b565b610513565b9080601f830112156105995781602061059693359101610545565b90565b61050f565b906020828203126105ce575f82013567ffffffffffffffff81116105c9576105c6920161057b565b90565b61009d565b610099565b6105e66105e136600461059e565b61100c565b6105ee61008f565b806105f881610433565b0390f35b60e08183031261063d57610612825f83016103bd565b9261063a61062384604085016103de565b9361063181606086016100b8565b9360800161049b565b90565b610099565b61064b9061046f565b9052565b9190610662905f60208501940190610642565b565b346106985761069461068361067a3660046105fc565b9291909161112b565b61068b61008f565b9182918261064f565b0390f35b610095565b5f9103126106a757565b610099565b1c90565b6106c09060086106c593026106ac565b61015a565b90565b906106d391546106b0565b90565b6106e260015f906106c8565b90565b91906106f8905f602085019401906102bc565b565b3461072a5761070a36600461069d565b6107266107156106d6565b61071d61008f565b918291826106e5565b0390f35b610095565b5f80fd5b5f80fd5b91906040838203126107715761076a9061075160406101fa565b9361075e825f83016100b8565b5f8601526020016100b8565b6020830152565b61072f565b67ffffffffffffffff8111610794576107906020916101b3565b0190565b6101bd565b909291926107ae6107a982610776565b6101fa565b938185526020850190828401116107ca576107c89261053a565b565b610513565b9080601f830112156107ed578160206107ea93359101610799565b90565b61050f565b61ffff1690565b610802816107f2565b0361080957565b5f80fd5b9050359061081a826107f9565b565b610825816102aa565b0361082c57565b5f80fd5b9050359061083d8261081c565b565b91909160a0818403126108e05761085660a06101fa565b925f82013567ffffffffffffffff81116108db578161087691840161057b565b5f85015260208201359167ffffffffffffffff83116108d65761089e826108cf9483016107cf565b60208601526108b0826040830161080d565b60408601526108c2826060830161080d565b6060860152608001610830565b6080830152565b610733565b610733565b61072f565b919060c083820312610966575f83013567ffffffffffffffff8111610961578161091091850161057b565b9261091e8260208301610737565b92606082013567ffffffffffffffff811161095c576109428461095992850161083f565b93610950816080860161048c565b9360a001610830565b90565b61009d565b61009d565b610099565b3461099d5761098761097e3660046108e5565b93929092611426565b61098f61008f565b8061099981610433565b0390f35b610095565b5f1b90565b906109b360ff916109a2565b9181191691161790565b6109c6906102aa565b90565b90565b906109e16109dc6109e8926109bd565b6109c9565b82546109a7565b9055565b6109f660806101fa565b90565b90610a03906102aa565b9052565b90610a11906102ec565b9052565b9190604083820312610a4f57610a4890610a2f60406101fa565b93610a3c825f83016100b8565b5f8601526020016100b8565b6020830152565b61072f565b610a5f903690610a15565b90565b52565b90565b5f5260205f2090565b5490565b610a7e81610a71565b821015610a9857610a90600591610a68565b910201905f90565b6100e5565b634e487b7160e01b5f525f60045260245ffd5b610aba90516102aa565b90565b610ac790516100a1565b90565b90610ad65f19916109a2565b9181191691161790565b90565b610af7610af2610afc926100a1565b610ae0565b6100a1565b90565b90565b90610b17610b12610b1e92610ae3565b610aff565b8254610aca565b9055565b610b2c90516102ec565b90565b610b38906102ec565b90565b90565b90610b53610b4e610b5a92610b2f565b610b3b565b82546109a7565b9055565b5190565b90610b8d60206001610b9394610b855f8201610b7f5f8801610abd565b90610b02565b019201610abd565b90610b02565b565b90610b9f91610b62565b565b90610bfe60606003610c0494610bc45f8201610bbe5f8801610ab0565b906109cc565b610bdd60018201610bd760208801610abd565b90610b02565b610bf660028201610bf060408801610b22565b90610b3e565b019201610b5e565b90610b95565b565b9190610c1757610c1591610ba1565b565b610a9d565b9081549168010000000000000000831015610c4c5782610c44916001610c4a95018155610a75565b90610c06565b565b6101bd565b610cb391610ca5610caa92610c76610cc1975f610c6f819282610106565b50016109cc565b610c9c600196939193610c93610c8a6109ec565b985f8a016109f9565b602088016101a5565b60408601610a07565b610a54565b60608301610a62565b610cbc5f610a65565b610c1c565b565b634e487b7160e01b5f52601160045260245ffd5b610ce0906100a1565b5f198114610cee5760010190565b610cc3565b90565b610d02610d07916100a1565b610cf3565b9052565b60e01b90565b610d1a90610d0b565b90565b610d29610d2e9161046f565b610d11565b9052565b602081610d45610d4d9360049695610cf6565b018092610d1d565b0190565b60200190565b5190565b60ff1690565b610d6a81610d5b565b03610d7157565b5f80fd5b35610d7f81610d61565b90565b90565b610d99610d94610d9e92610d82565b610ae0565b610d5b565b90565b90565b610db8610db3610dbd92610da1565b610ae0565b610d5b565b90565b90565b610dd7610dd2610ddc92610dc0565b610ae0565b610d5b565b90565b35610de9816100a4565b90565b90565b610e03610dfe610e08926100a1565b6109a2565b610dec565b90565b610e1490610dec565b9052565b610e2190610d5b565b9052565b610e5a610e6194610e50606094989795610e46608086019a5f870190610e0b565b6020850190610e18565b6040830190610e0b565b0190610e0b565b565b610e6b61008f565b3d5f823e3d90fd5b60018060a01b031690565b610e92610e8d610e9792610e73565b610ae0565b610e73565b90565b610ea390610e7e565b90565b610eaf90610e9a565b90565b610ebb90610e73565b90565b905f602091610ecd6001610171565b610ee0610ed982610cd7565b6001610b02565b610f098591610efb610ef061008f565b938492888401610d32565b8682018103825203826101d1565b610f1b610f1582610d57565b91610d51565b20610f2860408301610d75565b610f3a610f3485610d85565b91610d5b565b148314610ff957610f88610f4e601b610dc3565b925b610f76610f7187610f6a610f65898601610ddf565b610def565b9301610ddf565b610def565b90610f7f61008f565b94859485610e25565b838052039060015afa15610ff457610fa05f516109a2565b610fba610fb4610faf30610ea6565b610eb2565b91610eb2565b03610fd857610fd6905f610fcf819282610106565b50016109cc565b565b5f638baa579f60e01b815280610ff060048201610433565b0390fd5b610e63565b610f88611006601c610da4565b92610f50565b80519060205b82811061101e57505050565b8082015160f81c6001820183015160601c308115021760158301840151916035840185015192836055860187015f9392835f1461107e5750505090915060011461107a575b5f146110725760550101611012565b3d5f803e3d5ffd5b5f80fd5b5f958695508594505af19050611063565b5f90565b926110bf60206110c7946110b782886110af829b9a8399610cf6565b018092610cf6565b018092610cf6565b018092610cf6565b0190565b90565b6110e26110dd6110e7926110cb565b610ae0565b6100a1565b90565b6110f96110ff919392936100a1565b926100a1565b820391821161110a57565b610cc3565b61112361111e611128926100a1565b610ae0565b61046f565b90565b925f60209161113861108f565b506111436001610171565b61115661114f82610cd7565b6001610b02565b611196611164848901610ddf565b91611188611173878b01610ddf565b899061117d61008f565b9586948a8601611093565b8682018103825203826101d1565b6111a86111a282610d57565b91610d51565b206111b560408301610d75565b6111c76111c185610d85565b91610d5b565b1483146112ed576112156111db601b610dc3565b925b6112036111fe876111f76111f2898601610ddf565b610def565b9301610ddf565b610def565b9061120c61008f565b94859485610e25565b838052039060015afa156112e85761122d5f516109a2565b61124761124161123c30610ea6565b610eb2565b91610eb2565b036112cc5761128e611297916112896112a59561128060019693919361127761126e6109ec565b985f8a016109f9565b602088016101a5565b60408601610a07565b610a54565b60608301610a62565b6112a05f610a65565b610c1c565b6112c96112c46112b45f6100f9565b6112be60016110ce565b906110ea565b61110f565b90565b5f638baa579f60e01b8152806112e460048201610433565b0390fd5b610e63565b6112156112fa601c610da4565b926111dd565b905090565b90825f9392825e0152565b61133561132c9260209261132381610d57565b94858093611300565b93849101611305565b0190565b8061134a6020926113519594610cf6565b0190611310565b90565b90565b61136361136891610dec565b611354565b9052565b61137881602093611357565b0190565b61138591611310565b90565b61139260806101fa565b90565b906113fc6113f360036113a6611388565b946113bd6113b55f830161014d565b5f88016109f9565b6113d56113cc60018301610171565b602088016101a5565b6113ed6113e460028301610198565b60408801610a07565b0161021c565b60608401610a62565b565b61140790611395565b90565b61141e61141961142392610d82565b610ae0565b6100a1565b90565b939190926114346001610171565b61144761144082610cd7565b6001610b02565b611472869161146361145761008f565b93849260208401611339565b602082018103825203826101d1565b61148461147e82610d57565b91610d51565b2092611582575b61149861149e915f610106565b506113fe565b6114b26114ac5f8301610ab0565b156102aa565b611566576114c260208201610abd565b6114d46114ce5f61140a565b916100a1565b1180611541575b611525576114fa9360606114f4949391920151926117a5565b156102aa565b611509576115079061100c565b565b5f638baa579f60e01b81528061152160048201610433565b0390fd5b5f632572e3a960e01b81528061153d60048201610433565b0390fd5b5061154e60208201610abd565b61156061155a426100a1565b916100a1565b106114db565b5f637dd286d760e11b81528061157e60048201610433565b0390fd5b915f6115c26115a36115b160209461159861008f565b92839187830161136c565b8682018103825203826101d1565b6115b961008f565b9182918261137c565b039060025afa156115e65761149e6114986115dd5f516109a2565b9391505061148b565b610e63565b5f90565b90565b61160661160161160b926115ef565b610ae0565b6100a1565b90565b9061161882610d57565b81101561162a57600160209102010190565b6100e5565b90565b61164661164161164b9261162f565b610ae0565b6100a1565b90565b60ff60f81b1690565b611661905161164e565b90565b9061167661167183610776565b6101fa565b918252565b5f74113a3cb832911d113bb2b130baba34371733b2ba1160591b910152565b6116a46015611664565b906116b16020830161167b565b565b6116bb61169a565b90565b6116c890516107f2565b90565b6116df6116da6116e4926107f2565b610ae0565b6100a1565b90565b6c1131b430b63632b733b2911d1160991b9052565b5190565b905090565b61172a61172192602092611718816116fc565b94858093611700565b93849101611305565b0190565b601160f91b9052565b600191600d61175092611749816116e7565b0190611705565b6117598161172e565b0190565b9061178561176961008f565b8093611779602083019182611737565b908103825203836101d1565b565b90565b61179a6117a19160209493611310565b8092611357565b0190565b6117ad6115eb565b506117ba5f830151610d57565b6117cd6117c760256115f2565b916100a1565b10801561193d575b6119355761180c6118066117e76116b3565b60208501516118006117fb606088016116be565b6116cb565b91611b39565b156102aa565b61192d5761187361185461184f6118376118466118799561182b61008f565b9283916020830161136c565b602082018103825203826101d1565b60018091611c29565b61175d565b602084015161186d611868604087016116be565b6116cb565b91611b39565b156102aa565b6119265760205f6118a061188f83850151611787565b61189761008f565b9182918261137c565b039060025afa15611921575f6118f86020926118e7836118c081516109a2565b9201516118d96118ce61008f565b93849288840161178a565b8682018103825203826101d1565b6118ef61008f565b9182918261137c565b039060025afa1561191c57611919916119115f516109a2565b919091611e16565b90565b610e63565b610e63565b5050505f90565b505050505f90565b505050505f90565b5061197b61197561196361195e5f8601516119586020611632565b9061160e565b611657565b61196f60808601610ab0565b90611a33565b156102aa565b6117d5565b60f81b90565b61199a61199561199f926110cb565b611980565b61164e565b90565b6119ac6001611986565b90565b90565b6119c66119c16119cb926119af565b611980565b61164e565b90565b6119d860046119b2565b90565b90565b6119f26119ed6119f7926119db565b611980565b61164e565b90565b611a0460086119de565b90565b90565b611a1e611a19611a2392611a07565b611980565b61164e565b90565b611a306010611a0a565b90565b90611a3c6115eb565b5081611a466119a2565b16611a60611a5a611a556119a2565b61164e565b9161164e565b03611aff5780611ad4575b611acf5780611a786119fa565b16611a92611a8c611a876119fa565b61164e565b9161164e565b03611a9e575b50600190565b611aa6611a26565b16611ac0611aba611ab5611a26565b61164e565b9161164e565b14611acb575f611a98565b5f90565b505f90565b5080611ade6119ce565b16611af8611af2611aed6119ce565b61164e565b9161164e565b1415611a6b565b50505f90565b6001611b1191016100a1565b90565b611b23611b29919392936100a1565b926100a1565b8201809211611b3457565b610cc3565b611b51611b5791939293611b4b6115eb565b50611787565b92611787565b90611b6183610d57565b92611b6b83610d57565b611b745f61140a565b5b80611b88611b82886100a1565b916100a1565b1015611c1957611b99848290611b14565b611bab611ba5846100a1565b916100a1565b1015611c0f57611bc4611bbf84839061160e565b611657565b611bf2611bec611be7611be289611bdc8a8890611b14565b9061160e565b611657565b61164e565b9161164e565b03611c0557611c0090611b05565b611b75565b5050505050505f90565b5050505050505f90565b505050505050600190565b606090565b929192611c34611c24565b93815180611c43575b50505050565b90919294506003600282010460021b91610670604051967f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f5215027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f18603f5260208601938385019280826020010195600460038851945f8a525b0191603f8351818160121c16515f538181600c1c1651600153818160061c165160025316516003535f518152019085821015611d095790603f6003600493909150929192611cc0565b50955f9460039360209252016040520660020490613d3d60f01b82860352151502809303520382525f808080611c3d565b90565b611d51611d4c611d5692611d3a565b610ae0565b610e73565b90565b611d6290611d3d565b90565b90959492611db094611d9f611da992611d95608096611d8b60a088019c5f890190610e0b565b60208701906102bc565b60408501906102bc565b60608301906102bc565b01906102bc565b565b90611dc4611dbf83610517565b6101fa565b918252565b606090565b3d5f14611de957611dde3d611db2565b903d5f602084013e5b565b611df1611dc9565b90611de7565b90565b611e0e611e09611e1392611df7565b610ae0565b6100a1565b90565b5f9291611e898493611e266115eb565b50611e7a611e346014611d59565b9491611e4d6020611e46898801610abd565b9601610abd565b90611e656020611e5e8a8401610abd565b9201610abd565b91611e6e61008f565b96879560208701611d65565b602082018103825203826101d1565b602081019051915afa611e9a611dce565b9080611ee4575b9081611eac575b5090565b611eca9150611ec590611ebf601f611dfa565b9061160e565b611657565b611edd611ed76001611986565b9161164e565b145f611ea8565b50611eee81610d57565b611f01611efb6020611632565b916100a1565b14611ea156fea264697066735822122045c271aefe8e058bda05ecd502451f2a142ccf45f6dfbe6e28cd29bb52c1beff64736f6c634300081c0033",
    "sourceMap": "526:5407:9:-:0;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::o;:::-;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x60806040526004361015610010575b005b61001a5f35610089565b80630cb6aaf11461008457806361040b831461007f578063641cdfe21461007a5780638d80ff0a14610075578063a78fc24414610070578063affed0e01461006b5763b34893910361000e5761096b565b6106fa565b610664565b6105d3565b6104db565b610438565b610380565b60e01c90565b60405190565b5f80fd5b5f80fd5b5f80fd5b90565b6100ad816100a1565b036100b457565b5f80fd5b905035906100c5826100a4565b565b906020828203126100e0576100dd915f016100b8565b90565b610099565b634e487b7160e01b5f52603260045260245ffd5b5490565b5f5260205f2090565b61010f816100f9565b821015610129576101216005916100fd565b910201905f90565b6100e5565b5f1c90565b60ff1690565b61014561014a9161012e565b610133565b90565b6101579054610139565b90565b90565b61016961016e9161012e565b61015a565b90565b61017b905461015d565b90565b60ff1690565b6101906101959161012e565b61017e565b90565b6101a29054610184565b90565b906101af906100a1565b9052565b601f801991011690565b634e487b7160e01b5f52604160045260245ffd5b906101db906101b3565b810190811067ffffffffffffffff8211176101f557604052565b6101bd565b9061020d61020661008f565b92836101d1565b565b61021960406101fa565b90565b9061025361024a600161022d61020f565b9461024461023c5f8301610171565b5f88016101a5565b01610171565b602084016101a5565b565b5f90610260826100f9565b8110156102a65761027091610106565b509061027d5f830161014d565b9161028a60018201610171565b916102a3600361029c60028501610198565b930161021c565b90565b5f80fd5b151590565b6102b8906102aa565b9052565b6102c5906100a1565b9052565b634e487b7160e01b5f52602160045260245ffd5b600211156102e757565b6102c9565b906102f6826102dd565b565b610301906102ec565b90565b61030d906102f8565b9052565b61031a906100a1565b9052565b90602080610340936103365f8201515f860190610311565b0151910190610311565b565b61037761037e9461036d60609498979561036360a086019a5f8701906102af565b60208501906102bc565b6040830190610304565b019061031e565b565b346103b4576103b061039b6103963660046100c7565b610255565b906103a794929461008f565b94859485610342565b0390f35b610095565b5f80fd5b908160409103126103cb5790565b6103b9565b600211156103da57565b5f80fd5b905035906103eb826103d0565b565b60a08183031261042e57610403825f83016103bd565b9261042b61041484604085016103de565b9361042281606086016100b8565b936080016100b8565b90565b610099565b5f0190565b3461046a5761045461044b3660046103ed565b92919091610c51565b61045c61008f565b8061046681610433565b0390f35b610095565b63ffffffff1690565b6104818161046f565b0361048857565b5f80fd5b9050359061049982610478565b565b908160609103126104a95790565b6103b9565b91906080838203126104d657806104ca6104d3925f860161048c565b9360200161049b565b90565b610099565b3461050a576104f46104ee3660046104ae565b90610ebe565b6104fc61008f565b8061050681610433565b0390f35b610095565b5f80fd5b5f80fd5b67ffffffffffffffff8111610535576105316020916101b3565b0190565b6101bd565b90825f939282370152565b9092919261055a61055582610517565b6101fa565b93818552602085019082840111610576576105749261053a565b565b610513565b9080601f830112156105995781602061059693359101610545565b90565b61050f565b906020828203126105ce575f82013567ffffffffffffffff81116105c9576105c6920161057b565b90565b61009d565b610099565b6105e66105e136600461059e565b61100c565b6105ee61008f565b806105f881610433565b0390f35b60e08183031261063d57610612825f83016103bd565b9261063a61062384604085016103de565b9361063181606086016100b8565b9360800161049b565b90565b610099565b61064b9061046f565b9052565b9190610662905f60208501940190610642565b565b346106985761069461068361067a3660046105fc565b9291909161112b565b61068b61008f565b9182918261064f565b0390f35b610095565b5f9103126106a757565b610099565b1c90565b6106c09060086106c593026106ac565b61015a565b90565b906106d391546106b0565b90565b6106e260015f906106c8565b90565b91906106f8905f602085019401906102bc565b565b3461072a5761070a36600461069d565b6107266107156106d6565b61071d61008f565b918291826106e5565b0390f35b610095565b5f80fd5b5f80fd5b91906040838203126107715761076a9061075160406101fa565b9361075e825f83016100b8565b5f8601526020016100b8565b6020830152565b61072f565b67ffffffffffffffff8111610794576107906020916101b3565b0190565b6101bd565b909291926107ae6107a982610776565b6101fa565b938185526020850190828401116107ca576107c89261053a565b565b610513565b9080601f830112156107ed578160206107ea93359101610799565b90565b61050f565b61ffff1690565b610802816107f2565b0361080957565b5f80fd5b9050359061081a826107f9565b565b610825816102aa565b0361082c57565b5f80fd5b9050359061083d8261081c565b565b91909160a0818403126108e05761085660a06101fa565b925f82013567ffffffffffffffff81116108db578161087691840161057b565b5f85015260208201359167ffffffffffffffff83116108d65761089e826108cf9483016107cf565b60208601526108b0826040830161080d565b60408601526108c2826060830161080d565b6060860152608001610830565b6080830152565b610733565b610733565b61072f565b919060c083820312610966575f83013567ffffffffffffffff8111610961578161091091850161057b565b9261091e8260208301610737565b92606082013567ffffffffffffffff811161095c576109428461095992850161083f565b93610950816080860161048c565b9360a001610830565b90565b61009d565b61009d565b610099565b3461099d5761098761097e3660046108e5565b93929092611426565b61098f61008f565b8061099981610433565b0390f35b610095565b5f1b90565b906109b360ff916109a2565b9181191691161790565b6109c6906102aa565b90565b90565b906109e16109dc6109e8926109bd565b6109c9565b82546109a7565b9055565b6109f660806101fa565b90565b90610a03906102aa565b9052565b90610a11906102ec565b9052565b9190604083820312610a4f57610a4890610a2f60406101fa565b93610a3c825f83016100b8565b5f8601526020016100b8565b6020830152565b61072f565b610a5f903690610a15565b90565b52565b90565b5f5260205f2090565b5490565b610a7e81610a71565b821015610a9857610a90600591610a68565b910201905f90565b6100e5565b634e487b7160e01b5f525f60045260245ffd5b610aba90516102aa565b90565b610ac790516100a1565b90565b90610ad65f19916109a2565b9181191691161790565b90565b610af7610af2610afc926100a1565b610ae0565b6100a1565b90565b90565b90610b17610b12610b1e92610ae3565b610aff565b8254610aca565b9055565b610b2c90516102ec565b90565b610b38906102ec565b90565b90565b90610b53610b4e610b5a92610b2f565b610b3b565b82546109a7565b9055565b5190565b90610b8d60206001610b9394610b855f8201610b7f5f8801610abd565b90610b02565b019201610abd565b90610b02565b565b90610b9f91610b62565b565b90610bfe60606003610c0494610bc45f8201610bbe5f8801610ab0565b906109cc565b610bdd60018201610bd760208801610abd565b90610b02565b610bf660028201610bf060408801610b22565b90610b3e565b019201610b5e565b90610b95565b565b9190610c1757610c1591610ba1565b565b610a9d565b9081549168010000000000000000831015610c4c5782610c44916001610c4a95018155610a75565b90610c06565b565b6101bd565b610cb391610ca5610caa92610c76610cc1975f610c6f819282610106565b50016109cc565b610c9c600196939193610c93610c8a6109ec565b985f8a016109f9565b602088016101a5565b60408601610a07565b610a54565b60608301610a62565b610cbc5f610a65565b610c1c565b565b634e487b7160e01b5f52601160045260245ffd5b610ce0906100a1565b5f198114610cee5760010190565b610cc3565b90565b610d02610d07916100a1565b610cf3565b9052565b60e01b90565b610d1a90610d0b565b90565b610d29610d2e9161046f565b610d11565b9052565b602081610d45610d4d9360049695610cf6565b018092610d1d565b0190565b60200190565b5190565b60ff1690565b610d6a81610d5b565b03610d7157565b5f80fd5b35610d7f81610d61565b90565b90565b610d99610d94610d9e92610d82565b610ae0565b610d5b565b90565b90565b610db8610db3610dbd92610da1565b610ae0565b610d5b565b90565b90565b610dd7610dd2610ddc92610dc0565b610ae0565b610d5b565b90565b35610de9816100a4565b90565b90565b610e03610dfe610e08926100a1565b6109a2565b610dec565b90565b610e1490610dec565b9052565b610e2190610d5b565b9052565b610e5a610e6194610e50606094989795610e46608086019a5f870190610e0b565b6020850190610e18565b6040830190610e0b565b0190610e0b565b565b610e6b61008f565b3d5f823e3d90fd5b60018060a01b031690565b610e92610e8d610e9792610e73565b610ae0565b610e73565b90565b610ea390610e7e565b90565b610eaf90610e9a565b90565b610ebb90610e73565b90565b905f602091610ecd6001610171565b610ee0610ed982610cd7565b6001610b02565b610f098591610efb610ef061008f565b938492888401610d32565b8682018103825203826101d1565b610f1b610f1582610d57565b91610d51565b20610f2860408301610d75565b610f3a610f3485610d85565b91610d5b565b148314610ff957610f88610f4e601b610dc3565b925b610f76610f7187610f6a610f65898601610ddf565b610def565b9301610ddf565b610def565b90610f7f61008f565b94859485610e25565b838052039060015afa15610ff457610fa05f516109a2565b610fba610fb4610faf30610ea6565b610eb2565b91610eb2565b03610fd857610fd6905f610fcf819282610106565b50016109cc565b565b5f638baa579f60e01b815280610ff060048201610433565b0390fd5b610e63565b610f88611006601c610da4565b92610f50565b80519060205b82811061101e57505050565b8082015160f81c6001820183015160601c308115021760158301840151916035840185015192836055860187015f9392835f1461107e5750505090915060011461107a575b5f146110725760550101611012565b3d5f803e3d5ffd5b5f80fd5b5f958695508594505af19050611063565b5f90565b926110bf60206110c7946110b782886110af829b9a8399610cf6565b018092610cf6565b018092610cf6565b018092610cf6565b0190565b90565b6110e26110dd6110e7926110cb565b610ae0565b6100a1565b90565b6110f96110ff919392936100a1565b926100a1565b820391821161110a57565b610cc3565b61112361111e611128926100a1565b610ae0565b61046f565b90565b925f60209161113861108f565b506111436001610171565b61115661114f82610cd7565b6001610b02565b611196611164848901610ddf565b91611188611173878b01610ddf565b899061117d61008f565b9586948a8601611093565b8682018103825203826101d1565b6111a86111a282610d57565b91610d51565b206111b560408301610d75565b6111c76111c185610d85565b91610d5b565b1483146112ed576112156111db601b610dc3565b925b6112036111fe876111f76111f2898601610ddf565b610def565b9301610ddf565b610def565b9061120c61008f565b94859485610e25565b838052039060015afa156112e85761122d5f516109a2565b61124761124161123c30610ea6565b610eb2565b91610eb2565b036112cc5761128e611297916112896112a59561128060019693919361127761126e6109ec565b985f8a016109f9565b602088016101a5565b60408601610a07565b610a54565b60608301610a62565b6112a05f610a65565b610c1c565b6112c96112c46112b45f6100f9565b6112be60016110ce565b906110ea565b61110f565b90565b5f638baa579f60e01b8152806112e460048201610433565b0390fd5b610e63565b6112156112fa601c610da4565b926111dd565b905090565b90825f9392825e0152565b61133561132c9260209261132381610d57565b94858093611300565b93849101611305565b0190565b8061134a6020926113519594610cf6565b0190611310565b90565b90565b61136361136891610dec565b611354565b9052565b61137881602093611357565b0190565b61138591611310565b90565b61139260806101fa565b90565b906113fc6113f360036113a6611388565b946113bd6113b55f830161014d565b5f88016109f9565b6113d56113cc60018301610171565b602088016101a5565b6113ed6113e460028301610198565b60408801610a07565b0161021c565b60608401610a62565b565b61140790611395565b90565b61141e61141961142392610d82565b610ae0565b6100a1565b90565b939190926114346001610171565b61144761144082610cd7565b6001610b02565b611472869161146361145761008f565b93849260208401611339565b602082018103825203826101d1565b61148461147e82610d57565b91610d51565b2092611582575b61149861149e915f610106565b506113fe565b6114b26114ac5f8301610ab0565b156102aa565b611566576114c260208201610abd565b6114d46114ce5f61140a565b916100a1565b1180611541575b611525576114fa9360606114f4949391920151926117a5565b156102aa565b611509576115079061100c565b565b5f638baa579f60e01b81528061152160048201610433565b0390fd5b5f632572e3a960e01b81528061153d60048201610433565b0390fd5b5061154e60208201610abd565b61156061155a426100a1565b916100a1565b106114db565b5f637dd286d760e11b81528061157e60048201610433565b0390fd5b915f6115c26115a36115b160209461159861008f565b92839187830161136c565b8682018103825203826101d1565b6115b961008f565b9182918261137c565b039060025afa156115e65761149e6114986115dd5f516109a2565b9391505061148b565b610e63565b5f90565b90565b61160661160161160b926115ef565b610ae0565b6100a1565b90565b9061161882610d57565b81101561162a57600160209102010190565b6100e5565b90565b61164661164161164b9261162f565b610ae0565b6100a1565b90565b60ff60f81b1690565b611661905161164e565b90565b9061167661167183610776565b6101fa565b918252565b5f74113a3cb832911d113bb2b130baba34371733b2ba1160591b910152565b6116a46015611664565b906116b16020830161167b565b565b6116bb61169a565b90565b6116c890516107f2565b90565b6116df6116da6116e4926107f2565b610ae0565b6100a1565b90565b6c1131b430b63632b733b2911d1160991b9052565b5190565b905090565b61172a61172192602092611718816116fc565b94858093611700565b93849101611305565b0190565b601160f91b9052565b600191600d61175092611749816116e7565b0190611705565b6117598161172e565b0190565b9061178561176961008f565b8093611779602083019182611737565b908103825203836101d1565b565b90565b61179a6117a19160209493611310565b8092611357565b0190565b6117ad6115eb565b506117ba5f830151610d57565b6117cd6117c760256115f2565b916100a1565b10801561193d575b6119355761180c6118066117e76116b3565b60208501516118006117fb606088016116be565b6116cb565b91611b39565b156102aa565b61192d5761187361185461184f6118376118466118799561182b61008f565b9283916020830161136c565b602082018103825203826101d1565b60018091611c29565b61175d565b602084015161186d611868604087016116be565b6116cb565b91611b39565b156102aa565b6119265760205f6118a061188f83850151611787565b61189761008f565b9182918261137c565b039060025afa15611921575f6118f86020926118e7836118c081516109a2565b9201516118d96118ce61008f565b93849288840161178a565b8682018103825203826101d1565b6118ef61008f565b9182918261137c565b039060025afa1561191c57611919916119115f516109a2565b919091611e16565b90565b610e63565b610e63565b5050505f90565b505050505f90565b505050505f90565b5061197b61197561196361195e5f8601516119586020611632565b9061160e565b611657565b61196f60808601610ab0565b90611a33565b156102aa565b6117d5565b60f81b90565b61199a61199561199f926110cb565b611980565b61164e565b90565b6119ac6001611986565b90565b90565b6119c66119c16119cb926119af565b611980565b61164e565b90565b6119d860046119b2565b90565b90565b6119f26119ed6119f7926119db565b611980565b61164e565b90565b611a0460086119de565b90565b90565b611a1e611a19611a2392611a07565b611980565b61164e565b90565b611a306010611a0a565b90565b90611a3c6115eb565b5081611a466119a2565b16611a60611a5a611a556119a2565b61164e565b9161164e565b03611aff5780611ad4575b611acf5780611a786119fa565b16611a92611a8c611a876119fa565b61164e565b9161164e565b03611a9e575b50600190565b611aa6611a26565b16611ac0611aba611ab5611a26565b61164e565b9161164e565b14611acb575f611a98565b5f90565b505f90565b5080611ade6119ce565b16611af8611af2611aed6119ce565b61164e565b9161164e565b1415611a6b565b50505f90565b6001611b1191016100a1565b90565b611b23611b29919392936100a1565b926100a1565b8201809211611b3457565b610cc3565b611b51611b5791939293611b4b6115eb565b50611787565b92611787565b90611b6183610d57565b92611b6b83610d57565b611b745f61140a565b5b80611b88611b82886100a1565b916100a1565b1015611c1957611b99848290611b14565b611bab611ba5846100a1565b916100a1565b1015611c0f57611bc4611bbf84839061160e565b611657565b611bf2611bec611be7611be289611bdc8a8890611b14565b9061160e565b611657565b61164e565b9161164e565b03611c0557611c0090611b05565b611b75565b5050505050505f90565b5050505050505f90565b505050505050600190565b606090565b929192611c34611c24565b93815180611c43575b50505050565b90919294506003600282010460021b91610670604051967f4142434445464748494a4b4c4d4e4f505152535455565758595a616263646566601f5215027f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f18603f5260208601938385019280826020010195600460038851945f8a525b0191603f8351818160121c16515f538181600c1c1651600153818160061c165160025316516003535f518152019085821015611d095790603f6003600493909150929192611cc0565b50955f9460039360209252016040520660020490613d3d60f01b82860352151502809303520382525f808080611c3d565b90565b611d51611d4c611d5692611d3a565b610ae0565b610e73565b90565b611d6290611d3d565b90565b90959492611db094611d9f611da992611d95608096611d8b60a088019c5f890190610e0b565b60208701906102bc565b60408501906102bc565b60608301906102bc565b01906102bc565b565b90611dc4611dbf83610517565b6101fa565b918252565b606090565b3d5f14611de957611dde3d611db2565b903d5f602084013e5b565b611df1611dc9565b90611de7565b90565b611e0e611e09611e1392611df7565b610ae0565b6100a1565b90565b5f9291611e898493611e266115eb565b50611e7a611e346014611d59565b9491611e4d6020611e46898801610abd565b9601610abd565b90611e656020611e5e8a8401610abd565b9201610abd565b91611e6e61008f565b96879560208701611d65565b602082018103825203826101d1565b602081019051915afa611e9a611dce565b9080611ee4575b9081611eac575b5090565b611eca9150611ec590611ebf601f611dfa565b9061160e565b611657565b611edd611ed76001611986565b9161164e565b145f611ea8565b50611eee81610d57565b611f01611efb6020611632565b916100a1565b14611ea156fea264697066735822122045c271aefe8e058bda05ecd502451f2a142ccf45f6dfbe6e28cd29bb52c1beff64736f6c634300081c0033",
    "sourceMap": "526:5407:9:-:0;;;;;;;;;-1:-1:-1;526:5407:9;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;:::o;2123:17::-;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::o;:::-;;;;526:5407;;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;-1:-1:-1;526:5407:9;;;:::o;:::-;;:::i;:::-;;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;-1:-1:-1;526:5407:9;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::o;2206:20::-;;;;;;:::i;:::-;;:::o;526:5407::-;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::o;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;:::o;:::-;;:::i;:::-;;:::i;:::-;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::o;:::-;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::o;:::-;;;:::o;:::-;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;;:::i;:::-;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;:::i;:::-;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;;;;;;;:::i;:::-;:::o;:::-;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;:::o;:::-;;:::i;5449:412::-;5751:79;5449:412;5751:79;;5449:412;5661:33;5840:14;5449:412;5661:25;:14;5689:5;5661:4;;:14;:::i;:::-;;:25;:33;:::i;:::-;5751:79;5768:4;5782:6;5799:7;5819:9;5751:79;;;;:::i;:::-;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;5840:9;:4;:9;:::i;:::-;:14;:::i;:::-;5449:412::o;526:5407::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;;;:::o;:::-;;;:::o;:::-;;;;:::o;:::-;;;;:::i;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;3569:412::-;;3766:95;;3569:412;3714:7;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;3697:41;3723:14;3697:41;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;3687:52;;;;:::i;:::-;;;:::i;:::-;;3784:17;;:9;:17;;:::i;:::-;:22;;3805:1;3784:22;:::i;:::-;;;:::i;:::-;;:32;;;;3766:95;3784:32;3809:2;3784:32;:::i;:::-;;;3840:20;3848:11;3826:9;3818:20;3826:11;:9;;:11;;:::i;:::-;3818:20;:::i;:::-;3848:9;:11;;:::i;:::-;3840:20;:::i;:::-;3766:95;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;3875:23;;3885:13;3893:4;3885:13;:::i;:::-;3875:23;:::i;:::-;;;:::i;:::-;;3871:54;;3935:39;3969:5;3935:31;:20;3969:5;3935:4;;:20;:::i;:::-;;:31;:39;:::i;:::-;3569:412::o;3871:54::-;3907:18;;;;;;;;;;;;:::i;:::-;;;;3766:95;;:::i;3784:32::-;3766:95;3784:32;3814:2;3784:32;:::i;:::-;;;;1455:2250:13;1575:2076;;;;;;;;;;1455:2250;;;:::o;1575:2076::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;526:5407:9;;;:::o;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;2629:672::-;;2963:95;;2629:672;2816:21;;:::i;:::-;2893:7;;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;2876:59;2902:11;:9;;:11;;:::i;:::-;2915:9;2876:59;2915:11;:9;;:11;;:::i;:::-;2928:6;2876:59;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;2866:70;;;;:::i;:::-;;;:::i;:::-;;2981:17;;:9;:17;;:::i;:::-;:22;;3002:1;2981:22;:::i;:::-;;;:::i;:::-;;:32;;;;2963:95;2981:32;3006:2;2981:32;:::i;:::-;;;3037:20;3045:11;3023:9;3015:20;3023:11;:9;;:11;;:::i;:::-;3015:20;:::i;:::-;3045:9;:11;;:::i;:::-;3037:20;:::i;:::-;2963:95;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;3072:23;;3082:13;3090:4;3082:13;:::i;:::-;3072:23;:::i;:::-;;;:::i;:::-;;3068:54;;3150:79;;3167:4;3150:79;3239:14;3167:4;3150:79;3167:4;3181:6;3198:7;3218:9;3150:79;;;;:::i;:::-;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;:::i;:::-;;:::i;:::-;;;;;:::i;:::-;3239:9;:4;:9;:::i;:::-;:14;:::i;:::-;3271:23;3278:15;:11;:4;:11;:::i;:::-;:15;3292:1;3278:15;:::i;:::-;;;:::i;:::-;3271:23;:::i;:::-;3264:30;:::o;3068:54::-;3104:18;3907;;;3104;;;;;;;;:::i;:::-;;;;2963:95;;:::i;2981:32::-;2963:95;2981:32;3011:2;2981:32;:::i;:::-;;;;526:5407;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;:::i;:::-;;:::o;:::-;;:::o;:::-;;;;;:::i;:::-;;:::i;:::-;;;:::o;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;;;;;:::i;:::-;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;4513:695::-;;;;;4770:7;;;:::i;:::-;;;;;:::i;:::-;;;:::i;:::-;4753:32;4779:5;4753:32;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;4743:43;;;;:::i;:::-;;;:::i;:::-;;4800:7;4796:60;;4513:695;4884:20;4867:37;4884:4;;:20;:::i;:::-;;4867:37;:::i;:::-;4918:15;4919:14;;:3;:14;;:::i;:::-;4918:15;;:::i;:::-;4914:46;;4974:10;;:3;:10;;:::i;:::-;:14;;4987:1;4974:14;:::i;:::-;;;:::i;:::-;;:46;;;4513:695;4970:71;;5056:67;5077:9;5109:13;5057:66;5077:9;5088:8;5098:9;5109:3;:13;;5057:66;;:::i;:::-;5056:67;;:::i;:::-;5052:123;;5195:5;;;:::i;:::-;4513:695::o;5052:123::-;5146:18;3907;;;5146;;;;;;;;:::i;:::-;;;;4970:71;5029:12;;;;;;;;;;;;:::i;:::-;;;;4974:46;4992:3;:10;;:3;:10;;:::i;:::-;:28;;5005:15;4992:28;:::i;:::-;;;:::i;:::-;;4974:46;;4914;4942:18;;;;;;;;;;;;:::i;:::-;;;;4796:60;4845:9;4821:35;;4828:27;;4821:35;4845:9;4828:27;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;4821:35;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;4867:37;4884:20;4821:35;;;;:::i;:::-;4796:60;;;;;;4821:35;;:::i;526:5407::-;;;:::o;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;;;;;;:::o;:::-;;;;:::i;:::-;;;;;;;:::i;:::-;:::o;:::-;;;:::i;:::-;;:::o;:::-;;;;;:::i;:::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;;;:::o;:::-;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;:::o;:::-;;;;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;;:::i;:::-;;;:::o;:::-;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;:::o;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;;:::i;:::-;;;:::o;5958:1444:15:-;6148:4;;:::i;:::-;6236:8;:33;:26;:8;:26;;:33;:::i;:::-;:38;;6272:2;6236:38;:::i;:::-;;;:::i;:::-;;:140;;;;5958:1444;6219:205;;6566:68;6567:67;6500:52;;:::i;:::-;6590:23;:8;:23;;6567:67;6615:18;;:8;:18;;:::i;:::-;6567:67;:::i;:::-;;;:::i;:::-;6566:68;;:::i;:::-;6562:111;;6938:77;6870:52;6772:54;6786:27;;6937:78;6803:9;6786:27;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;6815:4;6821;6772:54;;:::i;:::-;6870:52;:::i;:::-;6966:23;:8;:23;;6938:77;6991:23;;:8;:23;;:::i;:::-;6938:77;:::i;:::-;;;:::i;:::-;6937:78;;:::i;:::-;6933:121;;7189:38;;;7196:30;7202:8;;:23;;7196:30;:::i;:::-;7189:38;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;7259:72;;;7189:38;7266:64;7189:38;;;;;:::i;:::-;7283:8;:26;;7266:64;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;7259:72;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;7349:46;7259:72;;;;;:::i;:::-;7374:9;7385;7349:46;;:::i;:::-;7342:53;:::o;7259:72::-;;:::i;7189:38::-;;:::i;6933:121::-;7038:5;;;;7031:12;:::o;6562:111::-;6657:5;;;;;6650:12;:::o;6219:205::-;6408:5;;;;;6401:12;:::o;6236:140::-;6310:8;6294:82;6295:81;6310:30;;:26;:8;:26;;:30;6337:2;6310:30;:::i;:::-;;;:::i;:::-;;:::i;:::-;6342:33;;:8;:33;;:::i;:::-;6295:81;;:::i;:::-;6294:82;;:::i;:::-;6236:140;;526:5407:9;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1263:41:15:-;1300:4;;;:::i;:::-;1263:41;:::o;1300:4::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1319:41::-;1356:4;;;:::i;:::-;1319:41;:::o;1356:4::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1375:41::-;1412:4;;;:::i;:::-;1375:41;:::o;1412:4::-;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;1431:41::-;1468:4;;;:::i;:::-;1431:41;:::o;1686:915::-;;1777:4;;:::i;:::-;1868:5;;1876:18;;:::i;:::-;1868:26;:48;;1898:18;;:::i;:::-;1868:48;:::i;:::-;;;:::i;:::-;;1864:91;;2158:77;;;1686:915;2154:120;;2400:5;2408:18;;:::i;:::-;2400:26;:48;;2430:18;;:::i;:::-;2400:48;:::i;:::-;;;:::i;:::-;;2396:177;;1686:915;2590:4;;2583:11;:::o;2396:177::-;2476:18;;:::i;:::-;2468:26;:48;;2498:18;;:::i;:::-;2468:48;:::i;:::-;;;:::i;:::-;;2464:99;;2396:177;;;2464:99;2543:5;2536:12;:::o;2154:120::-;2258:5;;2251:12;:::o;2158:77::-;2186:5;;2194:18;;:::i;:::-;2186:26;2185:50;;2217:18;;:::i;:::-;2185:50;:::i;:::-;;;:::i;:::-;;;2158:77;;1864:91;1939:5;;;1932:12;:::o;526:5407:9:-;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;:::o;:::-;;:::i;685:572:15:-;828:13;875:10;685:572;;;;785:4;;:::i;:::-;834:6;828:13;:::i;:::-;881:3;875:10;:::i;:::-;916:11;:18;:11;:18;:::i;:::-;961:8;:15;:8;:15;:::i;:::-;992:13;1004:1;992:13;:::i;:::-;1022:3;1007:1;:13;;1011:9;1007:13;:::i;:::-;;;:::i;:::-;;;;;1045:12;:8;1056:1;1045:12;;:::i;:::-;:22;;1061:6;1045:22;:::i;:::-;;;:::i;:::-;;;1041:73;;1132:14;;:11;1144:1;1132:14;;:::i;:::-;;:::i;:::-;:40;;1150:22;;:8;1159:12;:8;1170:1;1159:12;;:::i;:::-;1150:22;;:::i;:::-;;:::i;:::-;1132:40;:::i;:::-;;;:::i;:::-;;1128:91;;1022:3;;;:::i;:::-;992:13;;1128:91;1199:5;;;;;;;1192:12;:::o;1041:73::-;1094:5;;;;;;;1087:12;:::o;1007:13::-;;;;;;;1246:4;1239:11;:::o;526:5407:9:-;;;:::o;722:2892:8:-;;;;835:20;;:::i;:::-;914:2694;;;;;;722:2892;;;;;:::o;914:2694::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;526:5407:9;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;:::-;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;:::i;:::-;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;:::i;:::-;;;;;;;;;:::o;:::-;;;:::i;:::-;;;;;;:::o;:::-;;;;;;:::i;:::-;;:::i;:::-;;:::i;:::-;;:::o;670:547:14:-;1017:96;670:547;;1042:70;670:547;;817:4;;:::i;:::-;1025;1042:70;1017:13;1025:4;1017:13;:::i;:::-;1053:6;1061:9;1074:11;;1061;:9;;:11;;:::i;:::-;1074:9;:11;;:::i;:::-;1087:9;1100:11;;1087;:9;;:11;;:::i;:::-;1100:9;:11;;:::i;:::-;1042:70;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;1017:96;;;;;;;;;;:::i;:::-;1133:7;:30;;;670:547;1133:52;;;;670:547;1123:62;1196:14;:::o;1133:52::-;1167:10;:6;;:10;:6;:10;1174:2;1167:10;:::i;:::-;;;:::i;:::-;;:::i;:::-;:18;;1181:4;1167:18;:::i;:::-;;;:::i;:::-;;1133:52;;;:30;1144:6;:13;:6;:13;:::i;:::-;:19;;1161:2;1144:19;:::i;:::-;;;:::i;:::-;;1133:30;",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "authorize((uint256,uint256),uint8,uint256,(uint256,uint256,uint8))": "a78fc244",
    "execute(bytes,(uint256,uint256),(bytes,string,uint16,uint16,bool),uint32,bool)": "b3489391",
    "keys(uint256)": "0cb6aaf1",
    "multiSend(bytes)": "8d80ff0a",
    "nonce()": "affed0e0",
    "recoverAccount((uint256,uint256),uint8,uint256,uint256)": "61040b83",
    "revoke(uint32,(uint256,uint256,uint8))": "641cdfe2"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccountNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAuthority\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KeyExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"KeyNotAuthorized\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct ECDSA.PublicKey\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"internalType\":\"enum ExperimentDelegation.KeyType\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"yParity\",\"type\":\"uint8\"}],\"internalType\":\"struct ECDSA.RecoveredSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"authorize\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"publicKeyIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"calls\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"internalType\":\"struct ECDSA.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"authenticatorData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"clientDataJSON\",\"type\":\"string\"},{\"internalType\":\"uint16\",\"name\":\"challengeIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"typeIndex\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"userVerificationRequired\",\"type\":\"bool\"}],\"internalType\":\"struct WebAuthnP256.Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"publicKeyIndex\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"prehash\",\"type\":\"bool\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keys\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"enum ExperimentDelegation.KeyType\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct ECDSA.PublicKey\",\"name\":\"publicKey\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct ECDSA.PublicKey\",\"name\":\"publicKey\",\"type\":\"tuple\"},{\"internalType\":\"enum ExperimentDelegation.KeyType\",\"name\":\"keyType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyIndex\",\"type\":\"uint256\"}],\"name\":\"recoverAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"publicKeyIndex\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"yParity\",\"type\":\"uint8\"}],\"internalType\":\"struct ECDSA.RecoveredSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"jxom <https://github.com/jxom>\",\"details\":\"WARNING: THIS CONTRACT IS AN EXPERIMENT AND HAS NOT BEEN AUDITED.\",\"kind\":\"dev\",\"methods\":{\"authorize((uint256,uint256),uint8,uint256,(uint256,uint256,uint8))\":{\"params\":{\"expiry\":\"- The Unix timestamp at which the key expires.\",\"keyType\":\"- The type of key. 0 = P256, 1 = WebAuthn-P256, 2 = WebCrypto-P256.\",\"publicKey\":\"- The public key to authorize.\",\"signature\":\"- EOA secp256k1 signature over the public key.\"}},\"execute(bytes,(uint256,uint256),(bytes,string,uint16,uint16,bool),uint32,bool)\":{\"params\":{\"calls\":\"- The calls to execute.\",\"metadata\":\"- The WebAuthn metadata.\",\"prehash\":\"- Whether to SHA-256 hash the digest.\",\"publicKeyIndex\":\"- The index of the authorized public key to use.\",\"signature\":\"- The WebAuthn-wrapped P256 signature over the calls: `p256.sign(keccak256(nonce \\u2016 calls))`.\"}},\"multiSend(bytes)\":{\"details\":\"Sends multiple transactions and reverts all if one fails.\",\"params\":{\"transactions\":\"Encoded transactions. Each transaction is encoded as a packed bytes of                     operation has to be uint8(0) in this version (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding\"}},\"recoverAccount((uint256,uint256),uint8,uint256,uint256)\":{\"params\":{\"expiry\":\"Expiry for the new key\",\"keyType\":\"New key type\",\"publicKey\":\"New public key\"}},\"revoke(uint32,(uint256,uint256,uint8))\":{\"params\":{\"publicKeyIndex\":\"- The index of the public key to revoke.\",\"signature\":\"- EOA secp256k1 signature over the public key index.\"}}},\"title\":\"ExperimentDelegation\",\"version\":1},\"userdoc\":{\"errors\":{\"AccountNotFound()\":[{\"notice\":\"Thrown when an address is not found for a nullifier\"}],\"InvalidAuthority()\":[{\"notice\":\"Thrown when the sender is not the Authority.\"}],\"InvalidSignature()\":[{\"notice\":\"Thrown when a signature is invalid.\"}],\"KeyExpired()\":[{\"notice\":\"Thrown when a key is expired.\"}],\"KeyNotAuthorized()\":[{\"notice\":\"Thrown when a key is not authorized.\"}]},\"kind\":\"user\",\"methods\":{\"authorize((uint256,uint256),uint8,uint256,(uint256,uint256,uint8))\":{\"notice\":\"Authorizes a new public key on behalf of the Authority, provided the Authority's signature.\"},\"execute(bytes,(uint256,uint256),(bytes,string,uint16,uint16,bool),uint32,bool)\":{\"notice\":\"Executes a set of calls on behalf of the Authority, provided a WebAuthn-wrapped P256 signature over the calls, the WebAuthn metadata, and an invoker index.\"},\"keys(uint256)\":{\"notice\":\"List of keys associated with the Authority.\"},\"multiSend(bytes)\":{\"notice\":\"The code is for most part the same as the normal MultiSend (to keep compatibility),         but reverts if a transaction tries to use a delegatecall.This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\"},\"nonce()\":{\"notice\":\"Internal nonce used for replay protection.\"},\"recoverAccount((uint256,uint256),uint8,uint256,uint256)\":{\"notice\":\"Verify a self proofIf proof is valid, revoke specified key and authorize new key\"},\"revoke(uint32,(uint256,uint256,uint8))\":{\"notice\":\"Revokes an authorized public key on behalf of the Authority, provided the Authority's signature.\"}},\"notice\":\"Experimental EIP-7702 delegation contract that allows authorized Keys to invoke calls on behalf of an Authority.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ExperimentDelegation.sol\":\"ExperimentDelegation\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":forge-std/=lib/forge-std/src/\",\":self/=lib/self/\",\":solady/=lib/solady/src/\",\"src:forge-std/=lib/forge-std/src/\",\"src:self/=lib/self/contracts/\",\"src:solady/=lib/solady/src/\"],\"viaIR\":true},\"sources\":{\"lib/solady/src/utils/Base64.sol\":{\"keccak256\":\"0x07dcf983a86bc961e4cc0b57a2cfc3e46b20a50fed9b2092c7497e5fe3715a93\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://65c6c0a8a29cfc5b757abe84635c83e62a177a48c2ad0be24de6b0fba1a60ea2\",\"dweb:/ipfs/QmYuYwxHiBoUt6vaLTLbs2bZamRzqrTfA4BsNZ1TApTfrm\"]},\"src/ExperimentDelegation.sol\":{\"keccak256\":\"0xae1edce570518fca85c4771b2b16e3d5c2c8cbc8a8b13d30f9b9e3a19e2c33da\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6094552211462ffa70efca60c82b738d59ae8d9df50578bc84105f10d6480240\",\"dweb:/ipfs/QmcjWBLqWQgc3pFHzkD6nC3Wa89A1bGYD97gjCU93RZRaw\"]},\"src/utils/ECDSA.sol\":{\"keccak256\":\"0x14a31e9a4efb985d00c8f4d1f0d4d9a99eef64e88addcf563b0e93a0ddc525fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9fc74e53f36bf2a0f484115dc28006c93716b09ad9b9a33c2034b6a58e0f6feb\",\"dweb:/ipfs/QmTNp1QKavYLKFRpUCKCvLrqPNLf2hmgTFXoVonCfnKEuN\"]},\"src/utils/MultiSend.sol\":{\"keccak256\":\"0x82d9281eb69e1fc9d4c9e418f90a2627ff928c4f7c32e993fd55a68daf999f20\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ca8e8c7aafe6fb97506e761f8894567ed8206dd45162164cd1b0a3009a298139\",\"dweb:/ipfs/QmcdnPgmU8jPLvPRkbUtnKZjunzG2DWtLKET1mHD5dwM1T\"]},\"src/utils/P256.sol\":{\"keccak256\":\"0xe533cf68650f27bf70511494ac1955d01293641d9ee2388014c615e4b5b11686\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://406837142fcb3b5b4c1507e78590dd1db265fe39207f53b372df2b161dea3f8b\",\"dweb:/ipfs/QmXRj5jBmfWRkUWzZSPn5wB7u5iHGGJkBVbuRRLBFuVJ96\"]},\"src/utils/WebAuthnP256.sol\":{\"keccak256\":\"0x26b2e618fffe1bd28e6e92815364d3286d673d0d722cfc0181575e2f97686def\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51d3ddc5fb4fe4150207b989ac8434d61752072cc698d32dc05cb6247db4be2f\",\"dweb:/ipfs/QmWPA77zXsZJUTVfkcenfzcmojgadMsnEEYMFB8DbXyJdn\"]}},\"version\":1}",
  "metadata": {
    "compiler": { "version": "0.8.28+commit.7893614a" },
    "language": "Solidity",
    "output": {
      "abi": [
        { "inputs": [], "type": "error", "name": "AccountNotFound" },
        { "inputs": [], "type": "error", "name": "InvalidAuthority" },
        { "inputs": [], "type": "error", "name": "InvalidSignature" },
        { "inputs": [], "type": "error", "name": "KeyExpired" },
        { "inputs": [], "type": "error", "name": "KeyNotAuthorized" },
        { "inputs": [], "stateMutability": "payable", "type": "fallback" },
        {
          "inputs": [
            {
              "internalType": "struct ECDSA.PublicKey",
              "name": "publicKey",
              "type": "tuple",
              "components": [
                { "internalType": "uint256", "name": "x", "type": "uint256" },
                { "internalType": "uint256", "name": "y", "type": "uint256" }
              ]
            },
            {
              "internalType": "enum ExperimentDelegation.KeyType",
              "name": "keyType",
              "type": "uint8"
            },
            { "internalType": "uint256", "name": "expiry", "type": "uint256" },
            {
              "internalType": "struct ECDSA.RecoveredSignature",
              "name": "signature",
              "type": "tuple",
              "components": [
                { "internalType": "uint256", "name": "r", "type": "uint256" },
                { "internalType": "uint256", "name": "s", "type": "uint256" },
                { "internalType": "uint8", "name": "yParity", "type": "uint8" }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "authorize",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "publicKeyIndex",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "calls", "type": "bytes" },
            {
              "internalType": "struct ECDSA.Signature",
              "name": "signature",
              "type": "tuple",
              "components": [
                { "internalType": "uint256", "name": "r", "type": "uint256" },
                { "internalType": "uint256", "name": "s", "type": "uint256" }
              ]
            },
            {
              "internalType": "struct WebAuthnP256.Metadata",
              "name": "metadata",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes",
                  "name": "authenticatorData",
                  "type": "bytes"
                },
                {
                  "internalType": "string",
                  "name": "clientDataJSON",
                  "type": "string"
                },
                {
                  "internalType": "uint16",
                  "name": "challengeIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "uint16",
                  "name": "typeIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "bool",
                  "name": "userVerificationRequired",
                  "type": "bool"
                }
              ]
            },
            {
              "internalType": "uint32",
              "name": "publicKeyIndex",
              "type": "uint32"
            },
            { "internalType": "bool", "name": "prehash", "type": "bool" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "execute"
        },
        {
          "inputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "keys",
          "outputs": [
            { "internalType": "bool", "name": "authorized", "type": "bool" },
            { "internalType": "uint256", "name": "expiry", "type": "uint256" },
            {
              "internalType": "enum ExperimentDelegation.KeyType",
              "name": "keyType",
              "type": "uint8"
            },
            {
              "internalType": "struct ECDSA.PublicKey",
              "name": "publicKey",
              "type": "tuple",
              "components": [
                { "internalType": "uint256", "name": "x", "type": "uint256" },
                { "internalType": "uint256", "name": "y", "type": "uint256" }
              ]
            }
          ]
        },
        {
          "inputs": [
            { "internalType": "bytes", "name": "transactions", "type": "bytes" }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "multiSend"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "nonce",
          "outputs": [
            { "internalType": "uint256", "name": "", "type": "uint256" }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "struct ECDSA.PublicKey",
              "name": "publicKey",
              "type": "tuple",
              "components": [
                { "internalType": "uint256", "name": "x", "type": "uint256" },
                { "internalType": "uint256", "name": "y", "type": "uint256" }
              ]
            },
            {
              "internalType": "enum ExperimentDelegation.KeyType",
              "name": "keyType",
              "type": "uint8"
            },
            { "internalType": "uint256", "name": "expiry", "type": "uint256" },
            { "internalType": "uint256", "name": "keyIndex", "type": "uint256" }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "recoverAccount"
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "publicKeyIndex",
              "type": "uint32"
            },
            {
              "internalType": "struct ECDSA.RecoveredSignature",
              "name": "signature",
              "type": "tuple",
              "components": [
                { "internalType": "uint256", "name": "r", "type": "uint256" },
                { "internalType": "uint256", "name": "s", "type": "uint256" },
                { "internalType": "uint8", "name": "yParity", "type": "uint8" }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "revoke"
        },
        { "inputs": [], "stateMutability": "payable", "type": "receive" }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "authorize((uint256,uint256),uint8,uint256,(uint256,uint256,uint8))": {
            "params": {
              "expiry": "- The Unix timestamp at which the key expires.",
              "keyType": "- The type of key. 0 = P256, 1 = WebAuthn-P256, 2 = WebCrypto-P256.",
              "publicKey": "- The public key to authorize.",
              "signature": "- EOA secp256k1 signature over the public key."
            }
          },
          "execute(bytes,(uint256,uint256),(bytes,string,uint16,uint16,bool),uint32,bool)": {
            "params": {
              "calls": "- The calls to execute.",
              "metadata": "- The WebAuthn metadata.",
              "prehash": "- Whether to SHA-256 hash the digest.",
              "publicKeyIndex": "- The index of the authorized public key to use.",
              "signature": "- The WebAuthn-wrapped P256 signature over the calls: `p256.sign(keccak256(nonce ‖ calls))`."
            }
          },
          "multiSend(bytes)": {
            "details": "Sends multiple transactions and reverts all if one fails.",
            "params": {
              "transactions": "Encoded transactions. Each transaction is encoded as a packed bytes of                     operation has to be uint8(0) in this version (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding"
            }
          },
          "recoverAccount((uint256,uint256),uint8,uint256,uint256)": {
            "params": {
              "expiry": "Expiry for the new key",
              "keyType": "New key type",
              "publicKey": "New public key"
            }
          },
          "revoke(uint32,(uint256,uint256,uint8))": {
            "params": {
              "publicKeyIndex": "- The index of the public key to revoke.",
              "signature": "- EOA secp256k1 signature over the public key index."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "authorize((uint256,uint256),uint8,uint256,(uint256,uint256,uint8))": {
            "notice": "Authorizes a new public key on behalf of the Authority, provided the Authority's signature."
          },
          "execute(bytes,(uint256,uint256),(bytes,string,uint16,uint16,bool),uint32,bool)": {
            "notice": "Executes a set of calls on behalf of the Authority, provided a WebAuthn-wrapped P256 signature over the calls, the WebAuthn metadata, and an invoker index."
          },
          "keys(uint256)": {
            "notice": "List of keys associated with the Authority."
          },
          "multiSend(bytes)": {
            "notice": "The code is for most part the same as the normal MultiSend (to keep compatibility),         but reverts if a transaction tries to use a delegatecall.This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise"
          },
          "nonce()": { "notice": "Internal nonce used for replay protection." },
          "recoverAccount((uint256,uint256),uint8,uint256,uint256)": {
            "notice": "Verify a self proofIf proof is valid, revoke specified key and authorize new key"
          },
          "revoke(uint32,(uint256,uint256,uint8))": {
            "notice": "Revokes an authorized public key on behalf of the Authority, provided the Authority's signature."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "forge-std/=lib/forge-std/src/",
        "self/=lib/self/",
        "solady/=lib/solady/src/",
        "src:forge-std/=lib/forge-std/src/",
        "src:self/=lib/self/contracts/",
        "src:solady/=lib/solady/src/"
      ],
      "optimizer": { "enabled": false, "runs": 200 },
      "metadata": { "bytecodeHash": "ipfs" },
      "compilationTarget": {
        "src/ExperimentDelegation.sol": "ExperimentDelegation"
      },
      "evmVersion": "prague",
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/solady/src/utils/Base64.sol": {
        "keccak256": "0x07dcf983a86bc961e4cc0b57a2cfc3e46b20a50fed9b2092c7497e5fe3715a93",
        "urls": [
          "bzz-raw://65c6c0a8a29cfc5b757abe84635c83e62a177a48c2ad0be24de6b0fba1a60ea2",
          "dweb:/ipfs/QmYuYwxHiBoUt6vaLTLbs2bZamRzqrTfA4BsNZ1TApTfrm"
        ],
        "license": "MIT"
      },
      "src/ExperimentDelegation.sol": {
        "keccak256": "0xae1edce570518fca85c4771b2b16e3d5c2c8cbc8a8b13d30f9b9e3a19e2c33da",
        "urls": [
          "bzz-raw://6094552211462ffa70efca60c82b738d59ae8d9df50578bc84105f10d6480240",
          "dweb:/ipfs/QmcjWBLqWQgc3pFHzkD6nC3Wa89A1bGYD97gjCU93RZRaw"
        ],
        "license": "MIT"
      },
      "src/utils/ECDSA.sol": {
        "keccak256": "0x14a31e9a4efb985d00c8f4d1f0d4d9a99eef64e88addcf563b0e93a0ddc525fa",
        "urls": [
          "bzz-raw://9fc74e53f36bf2a0f484115dc28006c93716b09ad9b9a33c2034b6a58e0f6feb",
          "dweb:/ipfs/QmTNp1QKavYLKFRpUCKCvLrqPNLf2hmgTFXoVonCfnKEuN"
        ],
        "license": "MIT"
      },
      "src/utils/MultiSend.sol": {
        "keccak256": "0x82d9281eb69e1fc9d4c9e418f90a2627ff928c4f7c32e993fd55a68daf999f20",
        "urls": [
          "bzz-raw://ca8e8c7aafe6fb97506e761f8894567ed8206dd45162164cd1b0a3009a298139",
          "dweb:/ipfs/QmcdnPgmU8jPLvPRkbUtnKZjunzG2DWtLKET1mHD5dwM1T"
        ],
        "license": "MIT"
      },
      "src/utils/P256.sol": {
        "keccak256": "0xe533cf68650f27bf70511494ac1955d01293641d9ee2388014c615e4b5b11686",
        "urls": [
          "bzz-raw://406837142fcb3b5b4c1507e78590dd1db265fe39207f53b372df2b161dea3f8b",
          "dweb:/ipfs/QmXRj5jBmfWRkUWzZSPn5wB7u5iHGGJkBVbuRRLBFuVJ96"
        ],
        "license": "MIT"
      },
      "src/utils/WebAuthnP256.sol": {
        "keccak256": "0x26b2e618fffe1bd28e6e92815364d3286d673d0d722cfc0181575e2f97686def",
        "urls": [
          "bzz-raw://51d3ddc5fb4fe4150207b989ac8434d61752072cc698d32dc05cb6247db4be2f",
          "dweb:/ipfs/QmWPA77zXsZJUTVfkcenfzcmojgadMsnEEYMFB8DbXyJdn"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "id": 9
}
